generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  Role Role[]
}

model Employee {
  id                     Int                      @id @default(autoincrement())
  firstName              String                   @db.VarChar(255)
  middleName             String?                  @db.VarChar(255)
  lastName               String                   @db.VarChar(255)
  email                  String                   @db.VarChar(255)
  addressLine            String                   @db.VarChar(255)
  city                   String                   @db.VarChar(255)
  province               String                   @db.VarChar(255)
  country                String                   @db.VarChar(255)
  roleId                 Int
  employeeTypeId         Int
  basePay                Float
  EmployeeType           EmployeeType             @relation(fields: [employeeTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Role                   Role                     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  GovernmentContribution GovernmentContribution[]
  Leave                  Leave[]
  Payhead                Payhead[]
  Payroll                Payroll[]
  Signatory              Signatory[]
}

model EmployeeType {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  Employee Employee[]
}

model Leave {
  id            Int         @id @default(autoincrement())
  employeeId    Int
  leaveTypeId   Int
  start_date    DateTime    @db.Date
  end_date      DateTime    @db.Date
  leaveStatusId Int
  Employee      Employee    @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  LeaveStatus   LeaveStatus @relation(fields: [leaveStatusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  LeaveType     LeaveType   @relation(fields: [leaveTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Signatory     Signatory[]
}

model LeaveStatus {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(255)
  Leave Leave[]
}

model LeaveType {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(255)
  Leave Leave[]
}

model Role {
  id           Int        @id @default(autoincrement())
  title        String     @db.VarChar(255)
  departmentId Int
  Employee     Employee[]
  Department   Department @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Signatory {
  id         Int      @id @default(autoincrement())
  approverId Int
  leaveId    Int
  Employee   Employee @relation(fields: [approverId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Leave      Leave    @relation(fields: [leaveId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model GovernmentContribution {
  id          Int      @id @default(autoincrement())
  sss         Float?
  philHealth  Float?
  pagIbig     Float?
  employeeId  Int
  totalAmount Float?
  Employee    Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Payroll {
  id              Int         @id @default(autoincrement())
  payrollTypeId   Int
  cutoffStartDate DateTime    @db.Date
  cutoffEndDate   DateTime    @db.Date
  dateCreated     DateTime    @db.Date
  employeeId     Int
  Employee        Employee    @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PayrollType     PayrollType @relation(fields: [payrollTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Payslip         Payslip[]
}

model PayrollType {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(255)
  Payroll Payroll[]
}

model Payhead {
  id            Int         @id @default(autoincrement())
  payheadTypeId Int
  employeeId    Int
  description   String      @db.VarChar(255)
  amount        Float
  effectiveDate DateTime    @db.Date
  Employee      Employee    @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PayheadType   PayheadType @relation(fields: [payheadTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PayheadType {
  id      Int       @id(map: "Deduction_pkey") @default(autoincrement())
  name    String    @db.VarChar(255)
  Payhead Payhead[]
}

model Payslip {
  id             Int     @id @default(autoincrement())
  payrollId      Int
  totalDeduction Float?
  totalEarning   Float?
  netPay         Float?
  Payroll        Payroll @relation(fields: [payrollId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
